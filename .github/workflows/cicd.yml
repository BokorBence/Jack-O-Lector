name: CI/CD

on:
  push:
    branches: "**"
  pull_request:
    branches: "**"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev
        sudo apt-get install libsdl2-image-dev
        sudo apt-get install cppcheck
        
    - name: CPPCheck
      # Runs cppcheck on whole repository
      run: cppcheck --enable=all ./
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    
    - name: Create Artifact
      run: |
        mkdir release
        ls -l
        ls build
        ls release
        cp ${{github.workspace}}/build/Main.html release/index.html
        cp ./Main.js release/Main.js
        cp build/Main.wasm release/Main.wasm
    
    - name: Publish Artifact
      uses: actions/upload-artifact@v2
      with:
        name: web-release
        path: release

    - name: Install Butler
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
        unzip butler.zip
        chmod +x butler
        ./butler -V

    - name: Create release zip and run Butler

      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        cd release
        zip -r ../release.zip *
        cd ..

        ./butler login
        ./butler push release.zip object71/pong:html5
        ./butler logout
      
